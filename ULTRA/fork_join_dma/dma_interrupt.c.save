/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  dma_interrupt.c
 *
 *  AUTHOR:     Mark McDermott
 *  CREATED:    May 18, 2019
 *
 *  DESCRIPTION: This kernel module registers interrupts from the dma 
 *               and does a call back to the application routine that
 *               is waiting on the interrupt. 
 *
 *  DEPENDENCIES: Works on Xilinx ZED Board
 *
 *
 */

#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/proc_fs.h>
#include <linux/version.h>
#include <linux/errno.h>
#include <linux/fs.h>
#include <linux/mm.h>
#include <linux/interrupt.h>
#include <linux/sched.h>
#include <asm/uaccess.h>
#include <linux/io.h>
#include <linux/module.h>
#include <asm/gpio.h>
#include <linux/vmalloc.h>
#include <linux/mman.h>
#include <linux/slab.h>
#include <linux/ioport.h>
#include <linux/platform_device.h>
#include <linux/bitops.h>
#include <linux/clk.h>
#include <linux/gpio/driver.h>

#include <linux/pm_runtime.h>
#include <linux/of.h>

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
   DEFINITIONS
*/

#define MODULE_VER "1.0"

#define DMA_MAJOR   241   // Need to mknod /dev/dma_int c 241 0
#define MODULE_NM   "dma_interrupt"       


#define IRQF_DMA	(IRQF_TRIGGER_HIGH|IRQF_TRIGGER_LOW|\
			         IRQF_TRIGGER_RISING|IRQF_TRIGGER_FALLING)

#undef DEBUG
//#define DEBUG         // Uncomment to enable debug mode

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
    Define structures
 */

static struct proc_dir_entry    *interrupt_dma_file;

static struct fasync_struct     *fasync_dma_queue ;

int             interruptcount  = 0;
int             temp            = 0;
int             len             = 0;
char            *msg            = NULL;
unsigned int    gic_interrupt;

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  function: interrupt_dma_handler
 *
 *  This function is the interrupt handler for the DMA interrupt
 *
 */
 
//static irqreturn_t interrupt_dma_handler(int irq, void *dev_id, struct pt_regs *regs)

irq_handler_t interrupt_dma_handler(int irq, void *dev_id, struct pt_regs *regs)
{
    interruptcount++;    // Is this really needed ???????
  
    #ifdef DEBUG
    printk(KERN_INFO "dma_int: Interrupt detected in kernel \n");  
    #endif
  
    /* Signal the user application that an interupt occured */  

    kill_fasync(&fasync_dma_queue, SIGIO, POLL_IN);

return  (irq_handler_t) IRQ_HANDLED;

}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*    function: read_proc   --- Example code may be deprecated soon
*/


int read_proc(struct file *filp,char *buf,size_t count,loff_t *offp ) 
{
    if(count>temp)
    {
        count=temp;
    }

    temp=temp-count;
    //copy_to_user(buf,msg, count);
    
    if(count==0) temp=len;
    printk("read_proc count value = %d\n", count);
      
return count;
}


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*    function: write_proc   --- Example code may be deprecated soon
*/

int write_proc(struct file *filp,const char *buf,size_t count,loff_t *offp)
{
    //copy_from_user(msg,buf,count);
    len=count;
    temp=len;

    printk("write_proc count value = %d\n", count);

return count;
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * function: dma_open
 *
 * This function is called when the dma_int device is opened.
 * Used primarily for debug
 *
 */
 
static int dma_open (struct inode *inode, struct file *file) 
{
    #ifdef DEBUG
    printk(KERN_INFO "dma_int: Inside dma_open \n");  
    #endif
    return 0;
}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * function: dma_release
 *
 * This function is called when the dma_int device is released
 *
 */
 
static int dma_release (struct inode *inode, struct file *file) 
{

    #ifdef DEBUG
    printk(KERN_INFO "\ndma_int: Inside dma_release \n");  
    #endif
    
    return 0;
}

/*  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * function: dma_fasync
 *
 * This is invoked by the kernel when the user program opens this
 * input device and issues fcntl(F_SETFL) on the associated file
 * descriptor. fasync_helper() ensures that if the driver issues a
 * kill_fasync(), a SIGIO is dispatched to the owning application.
 *
 */

static int dma_fasync (int fd, struct file *filp, int on)
{

    #ifdef DEBUG
    printk(KERN_INFO "\ndma_int: Inside dma_fasync \n");  
    #endif
    
    return fasync_helper(fd, filp, on, &fasync_dma_queue);
} 

/*  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*
*   Define which file operations are supported
*
*/

struct file_operations dma_fops = {
    .owner          =    THIS_MODULE,
    .llseek         =    NULL,
    .read           =    NULL,
    .write          =    NULL,
    .poll           =    NULL,
    .unlocked_ioctl =    NULL,
    .mmap           =    NULL,
    .open           =    dma_open,
    .flush          =    NULL,
    .release        =    dma_release,
    .fsync          =    NULL,
    .fasync         =    dma_fasync,
    .lock           =    NULL,
    .read           =    NULL,
    .write          =    NULL,
};

struct file_operations proc_fops = {
    read: read_proc,
    write: write_proc
};  
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// NOTE: need to match the correct "compatible" string in the DTB.

static const struct of_device_id zynq_dma_of_match[] = {
    { .compatible = "dma_interrupt" },
    { /* end of table */ }
};    

MODULE_DEVICE_TABLE(of, zynq_dma_of_match);

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *
 * zynq_dma_probe - Initialization method for a zynq_dma device
 *
 * Return: 0 on success, negative error otherwise.
 */

static int zynq_dma_probe(struct platform_device *pdev)
{
    struct resource *res;
        
     printk("In probe funtion\n");

    // This code gets the IRQ number by probing the system.

    res = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
   
    if (!res) {
        printk("No IRQ found\n");
        return 0;
    } 
    
    // Get the IRQ number 
    gic_interrupt  = res->start;

    printk("Probe IRQ # = %d\n", res->start);

    return 0;

}

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *
 * zynq_dma_remove - Driver removal function
 *
 * Return: 0 always
 */
 
static int zynq_dma_remove(struct platform_device *pdev)
{
    //struct zynq_dma *gpio = platform_get_drvdata(pdev)

    return 0;
}


static struct platform_driver zynq_dma_driver = {
    .driver    = {
        .name = MODULE_NM,
        .of_match_table = zynq_dma_of_match,
    },
    .probe = zynq_dma_probe,
    .remove = zynq_dma_remove,
};



/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * function: init_interrupt_dma
 *
 * This function creates the /proc directory entry interrupt_dma. 
 *
 */
 
static int __init init_interrupt_dma(void)
{

    int rv = 0;
    int err = 0;
    
    platform_driver_unregister(&zynq_dma_driver);
    
    printk("DMA Interrupt Module\n");
    printk("DMA Driver Loading.\n");
    printk("Using Major Number %d on %s\n", DMA_MAJOR, MODULE_NM); 
    
    err = platform_driver_register(&zynq_dma_driver);
      
    if(err !=0) printk("Driver register error with number %d\n",err);       
    else        printk("Driver registered with no error\n");
    
    if (register_chrdev(DMA_MAJOR, MODULE_NM, &dma_fops)) {
        printk("dma_int: unable to get major %d. ABORTING!\n", DMA_MAJOR);
    return -EBUSY;
    }

    interrupt_dma_file = proc_create("interrupt_dma", 0444, NULL, &proc_fops );
    msg=kmalloc(GFP_KERNEL,10*sizeof(char));
        
    if(interrupt_dma_file == NULL) {
        printk("dma_int: create /proc entry returned NULL. ABORTING!\n");
    //return -ENOMEM;
    goto no_interrupt_dma;
    }


// Request interrupt 
 
  rv = request_irq(gic_interrupt, 
  //rv = request_irq(61, 
                    (irq_handler_t) interrupt_dma_handler, 
                    IRQF_TRIGGER_LOW,
                   "interrupt_dma", 
                    NULL);
  
  if ( rv ) {
    printk("Can't get interrupt %d\n", gic_interrupt);
    goto no_interrupt_dma;
  }


/* Everything is initialized */

  printk(KERN_INFO "%s %s Initialized\n",MODULE_NM, MODULE_VER);
  return 0;

/* Remove the proc_entry on error */

no_interrupt_dma:
    unregister_chrdev(DMA_MAJOR, MODULE_NM);
    platform_driver_unregister(&zynq_dma_driver);
    remove_proc_entry("interrupt_dma", NULL);
    
    return -EBUSY;
}


/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  function: cleanup_interrupt_dma
 *
 *  This function frees interrupt 240 then removes the 
 *  /proc directory entry interrupt_dma
 *
 */
 
static void __exit cleanup_interrupt_dma(void)
{

    /* free the interrupt */
    free_irq(gic_interrupt,NULL);                   // Release IRQ 
    unregister_chrdev(DMA_MAJOR, MODULE_NM);        // Release character device
    platform_driver_unregister(&zynq_dma_driver);   // Unregister the driver
    remove_proc_entry("interrupt_dma", NULL);
    kfree(msg);
    printk(KERN_INFO "%s %s removed\n", MODULE_NM, MODULE_VER);
}

module_init(init_interrupt_dma);
module_exit(cleanup_interrupt_dma);

MODULE_AUTHOR("Mark McDermott");
MODULE_DESCRIPTION("ZED DMA interrupt module");
MODULE_LICENSE("GPL");

