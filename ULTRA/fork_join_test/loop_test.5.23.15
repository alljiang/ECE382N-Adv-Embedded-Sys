/*
 * loop_test.c: Test the SPI port on the SOC
 *
  *  AUTHOR: 	Mark McDermott
 *  CREATED: 	March 5, 2015
 *  COPYRIGHT:	Insilixa Inc. 
 *
 *  DESCRIPTION: This program sets up the SPI port on the SOC and performs
 *               a continuous test of the interface. Currently it sends one
 *               32 bit word at a time. Next steps will be to send a variable
 *               number of words. The interface utilizes a kernel module that
 *               that interrupts this routine once the data is received.
 *
 *  DEPENDENCIES: none
 *
 *
 */
 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <signal.h>
#include <fcntl.h>
#include <sys/mman.h>                                                                      
#include <sys/types.h>                                                                     
#include <sys/stat.h>  

#define spi_MAJOR 245
#define MAP_SIZE 4096UL                                                                                     
#define MAP_MASK (MAP_SIZE - 1)     

int det_int=0;

// ----------------------------------------------------------------
//
//  This routine does the interrupt handling for the main loop.
// 
// ----------------------------------------------------------------

void sighandler(int signo)
{
    if (signo==SIGIO)
        det_int++;
//    printf("\nmon_interrupt: Interrupt captured by SIGIO\n");  // DEBUG
    return;  /* Return to main loop */

}

char buffer[4096];

int main(int argc, char **argv)
{
    int count;
    struct sigaction action;
    int fd;
    int rc;
    int fc;

//    memset(&action, 0, sizeof(action));
    sigemptyset(&action.sa_mask);
    sigaddset(&action.sa_mask, SIGIO);
    
    action.sa_handler = sighandler;
    action.sa_flags = 0;

    sigaction(SIGIO, &action, NULL);
    
    fd = open("/dev/spi_int", O_RDWR);
    if (fd == -1) {
    	perror("Unable to open /dev/spi_int");
    	rc = fd;
    	exit (-1);
    }
    
    printf(" /dev/spi_int opened successfully \n");    	

    fc = fcntl(fd, F_SETOWN, getpid());

    printf("Made it through fcntl\n");
    
    if (fc == -1) {
    	perror("SETOWN failed\n");
    	rc = fd;
    	exit (-1);
    } 
    
    fc= fcntl(fd, F_SETFL, fcntl(fd, F_GETFL) | O_ASYNC);

    if (fc == -1) {
    	perror("SETFL failed\n");
    	rc = fd;
    	exit (-1);
    }   

//    printf(" WHat the shit\n");

// ----------------------------------------------------------------
//
// Test to make sure we can open up the SPI xmit and receive ports.
//
// ----------------------------------------------------------------
	
	int fdmem = open("/dev/mem", O_RDWR|O_SYNC, S_IRUSR);
	
	if(fdmem == -1)
	{
		printf("Unable to open /dev/mem.  Ensure it exists (major=1, minor=1)\n");
		return -1;
	}	

   
    volatile unsigned int *regs;                                           
    unsigned long spi_base_addr =   0x02008000;     // Base address of the SPI Unit
                                                                                                            
    printf("Getting ready to mmap\n");    

    regs = (unsigned int *)mmap(NULL, 
                                MAP_SIZE, 
                                PROT_READ|PROT_WRITE, 
                                MAP_SHARED,
                                fdmem, 
                                spi_base_addr & ~MAP_MASK
                                );    
	    
// ----------------------------------------------------------------
//
//  This while loop does the testing of the SPI port. The port is
//  connected to an FPGA which has a slave SPI unit that responds
//  with the transmitted data on the following SPI transaction.
// 
// ----------------------------------------------------------------

    volatile unsigned int *address ;                // Address of SPI register                                        
                                                                                                            
    
    unsigned int xmit_offset   =   0x00000004;     // Address of the transmit port
    unsigned int rcvr_offset   =   0x00000000;     // Address of the receive port             

    unsigned int spi_command   =   0x00000000;     // Start at zero
    unsigned int spi_received  =   0x00000000;     // Received value
    unsigned int spi_expected  =   0x00000000;     

//    printf("Entering first while loop\n");

                
//    printf("Entering second while loop\n");

    while(1) {

//      printf("SPI ADDRESS + offset 0x%.4x\n" , (spi_base_addr + xmit_offset));

//        address  = regs + (((spi_base_addr + xmit_offset) & MAP_MASK)>>2);    	

//    printf(" = 0x%.8x\n", address);

//        *address = spi_command;     // Write SPI command value   
        
//      printf("Did the first write\n");

//
// Now wait for an interrupt indicating that the SPI recieved data
//

        printf("Going to sleep\n");

        sleep(86400); /* one day */
        if (!det_int)
            continue;

        address  = regs + (((spi_base_addr + rcvr_offset) & MAP_MASK)>>2);    	
        spi_received = *address;
/*        
        if ( spi_received != spi_expected)
        {
            printf("Error: SPI value= %x\n", spi_received);
        }
        spi_expected    = spi_command;
        spi_command++;
*/
	printf("Interrupt detected - Received: %x \n", spi_received); 
        det_int=0;
        
    }
}
